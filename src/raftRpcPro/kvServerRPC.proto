syntax = "proto3"; // 指定使用Protobuf的第三版语法

package raftKVRpcProctoc; //所在的命名空间

option cc_generic_services = true;  //开启stub服务 启用C++通用RPC服务代码的生成，方便C++端直接调用RPC接口


/*
  .proto 文件是用于定义 Protocol Buffers（简称Protobuf） 数据结构和服务接口的描述文件
  
  本proto文件定义了 KV存储系统客户端与服务端通信的 消息格式 和 接口
    - 重点是支持客户端标识与请求编号，方便实现请求幂等和去重
    - RPC接口只暴露两个核心操作：读（Get）和写（PutAppend）
*/


// 日志实体 消息定义（数据结构）
message GetArgs
{
  bytes Key = 1 ;      // 要获取的键，二进制格式
  bytes ClientId = 2 ; // 客户端唯一标识，用于区分不同客户端
  int32 RequestId = 3; // 请求编号，用于请求去重或追踪
}

// Get请求的返回结果
message GetReply  
{
  bytes Err = 1;   // 错误信息，如果成功通常为空
  bytes Value = 2; // 对应Key的值，二进制格式
}

// Put 或 Append 请求的参数
message PutAppendArgs  
{
  bytes Key = 1;    // 要操作的键
  bytes  Value = 2; // 写入或追加的值
  bytes  Op = 3;    // 操作类型，字符串形式 ( "Put" 表示写入，"Append" 表示追加)

  // "Put" or "Append"
  // You'll have to add definitions here.
  // Field names must start with capital letters,
  // otherwise RPC will break.

  bytes  ClientId = 4;  // 客户端唯一标识
  int32  RequestId = 5; // 请求编号
}

// Put/Append操作的回复，仅包含错误信息
message PutAppendReply  
{
  bytes Err = 1;
}



// 服务接口定义：定义了一个RPC服务 kvServerRpc，包含两个远程调用接口 (只有raft节点之间才会涉及rpc通信)
service kvServerRpc 
{
  //PutAppend(args *PutAppendArgs, reply *PutAppendReply)
  //Get(args *GetArgs, reply *GetReply)

  rpc PutAppend(PutAppendArgs) returns(PutAppendReply); // 接收 PutAppendArgs，返回 PutAppendReply
  rpc Get (GetArgs) returns (GetReply); // 接收 GetArgs，返回 GetReply
} 


// message ResultCode
// {
//     int32 errcode = 1;
//     bytes errmsg = 2;
// }

// message GetFriendsListRequest  //请求，响应
// {
//     uint32 userid = 1;
// }

// message GetFriendsListResponse  //请求，响应
// {
//     ResultCode result = 1;
//     repeated bytes friends = 2;
// }

// // 好友模块
// service FiendServiceRpc  //具体的服务模块和服务方法
// {
//     rpc GetFriendsList(GetFriendsListRequest) returns(GetFriendsListResponse);
// }